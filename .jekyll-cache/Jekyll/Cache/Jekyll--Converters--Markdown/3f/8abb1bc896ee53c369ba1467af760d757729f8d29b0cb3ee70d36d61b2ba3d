I"A'<h2><u><b> Version Control System - git(5) </b></u></h2>

<h3>◆ Git 실습 매뉴얼 목차</h3>

<h4>1. <a href="./git(1)-basics.md">기초</a></h4>
<h4>2. <a href="./git(2)-branches.md">branch 활용법</a></h4>
<h4>3. <a href="./git(3)-remote.md">원격저장소(Remote Repository) 활용법</a></h4>
<h4>4. <a href="./git(4)-protocol.md">원격저장소와 통신 방식</a></h4>
<h4>5. <a href="./git(5)-merge.md">병합 충돌 및 해결</a></h4>
<h4>6. <a href="./git(6)-practical.md">중요 기능</a></h4>
<h4>7. <a href="./img/git_sts.pdf" download="">Spring Tool Suite(IDE)에서 git 사용법</a></h4>

<h2>merge란?</h2>

<ul>
  <li>따로 작업한 파일을 병합하는 과정</li>
  <li>협업 시 필수적이다.</li>
</ul>

<p><a href="git(2)-branches.md">git(2)-branches.md</a>에서 실습으로 branch간 병합을 하였다. 한 쪽에서만 수정이 되었거나, 중복되지 않는 부분을 수정하였기에 아무 문제가 없었다. 하지만 동일한 부분을 양쪽에서 모두 수정한 경우, 병합 시 충돌(merge conflict) 문제가 발생한다.</p>

<h2>케이스 1 : 하나의 저장소 안에서 branch 간의 병합 충돌</h2>

<p>master branch에서 f1.py 파일 안에 아래 파이썬 코드(물결사이에 있는 코드)를 붙여넣어 생성하고 commit한다.</p>
<pre>
~/git_merge$ git init
Initialized empty Git repository in C:/Users/IT기획팀_01/Desktop/git_merge/.git/

~/git_merge(master)$ vim f1.py

~~~
def Func1(username):
    print("Hello ", username)

Func1("youngjin")
~~~

~/git_merge(master)$ git add f1.py

~/git_merge(master)$ git commit -m "initial commit with youngjin"
[master (root-commit) dfe4096] initial commit with youngjin
 1 file changed, 4 insertions(+)
 create mode 100644 f1.py
</pre>

<p>exp branch를 생성한다. master branch와 같은 파일을 가지고 있다. <br />
Func1에 넘겨주는 파라미터를 “youngjin”에서 “sungwoo”로 변경 후 commit한다.</p>
<pre>
~/git_merge(master)$ git checkout -b exp
Switched to a new branch 'exp'

~/git_merge(exp)$ vim f1.py

~~~
def Func1(username):
    print("Hello ", username)

Func1("sungwoo")
~~~

~/git_merge(exp)$ git commit -am "commit from exp with sungwoo"
[exp e193be7] commit from exp with sungwoo
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>

<p>master 브랜치로 넘어와서 Func1에 넘겨주는 파라미터를 “youngjin”에서 “hyewon”으로 변경 후 commit 한다.</p>
<pre>
~/git_merge(master)$ git checkout master
Switched to branch 'master'

~/git_merge(master)$ vim f1.py

~~~
def Func1(username):
    print("Hello ", username)

Func1("hyewon")
~~~

~/git_merge(master)$ git commit -am "commit from master with hyewon"
[exp dc3b617] commit from exp with sungwoo
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>

<p>master branch에서 exp branch를 병합하면 충돌이 일어난다. branch 둘 다에서 같은 부분을 수정했기 때문이다. <br />
Auto-merging이 실패했다는 메세지와 함께 직접 코드를 고쳐야한다는 메세지가 출력된다.</p>
<pre>
~/git_merge(master)$ git merge exp
Auto-merging f1.py
CONFLICT (content): Merge conflict in f1.py
Automatic merge failed; fix conflicts and then commit the result.
</pre>

<p>git status를 확인해보면 병합 충돌의 이유가 나온다.</p>
<pre>
~/git_merge (master|MERGING)$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   f1.py

no changes added to commit (use "git add" and/or "git commit -a")
&lt;/pre&gt;

f1.py의 내용을 보면, ==== 를 중심으로 위쪽에는 현재 가리키고 있는 branch(master)의 내용, 아래쪽에는 exp가 가리키고 있는 파일의 내용이 나온다.   
충돌을 해결하기 위해서는 위/아래 둘 중 하나를 지워야한다.
<pre>
~/git_merge (master|MERGING)$ cat f1.py
def Func1(username):
    print("Hello ", username)

&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Func1("hyewon")
=======
Func1("sungwoo")
&gt;&gt;&gt;&gt;&gt;&gt;&gt; exp
</pre>

여기서는 exp의 내용을 지우고 commit하면 merge commit이 된다.
<pre>
~/git_merge (master|MERGING)$ vim f1.py

~/git_merge (master|MERGING)$ cat f1.py
def Func1(username):
    print("Hello ", username)

Func1("hyewon")
~~~

~/git_merge (master|MERGING)$ git commit -am "merge commit with hyewon"
[master b5bbcbc] merge commit with hyewon
</pre>

## 케이스 2 : 원격 저장소를 통한 병합 충돌

### 사전 준비 : 하나의 원격저장소를 통해 developer1와 developer2가 협업하는 상황 시뮬레이션

### 1. 원격 저장소 준비

GitLab에 원격저장소 git-test를 생성한다. 웹상에서 파일을 추가해 f1.py를 생성한다. 

아래 내용을 파일에 붙여넣고 저장(commit)한다.
~~~
def Func1(username):
    print("Hello ", username)

Func1("youngjin")
~~~

### 2. 로컬 저장소 준비

[git(2)-branches.md](git(2)-branches.md)에서 home, work를 만들었던 것처럼 developer1, developer2 디렉토리를 생성한다. 

<pre>
~/$ git clone https://gitlab.com/young-jin-lee/git-test.git developer1
Cloning into 'developer1'...
remote: Enumerating objects: 14, done.
remote: Counting objects: 100% (14/14), done.
remote: Compressing objects: 100% (9/9), done.
remote: Total 14 (delta 1), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (14/14), done.
Resolving deltas: 100% (1/1), done.
</pre>

<pre>
~/$ git clone https://gitlab.com/young-jin-lee/git-test.git developer2
Cloning into 'developer2'...
remote: Enumerating objects: 14, done.
remote: Counting objects: 100% (14/14), done.
remote: Compressing objects: 100% (9/9), done.
remote: Total 14 (delta 1), reused 0 (delta 0), pack-reused 0
Receiving objects: 100% (14/14), done.
Resolving deltas: 100% (1/1), done.
</pre>

### 3. developer1 의 저장소

developer1의 저장소에서 Func1의 파라미터를 "youngjin"에서 "hyewon"으로 수정하고 commit한다.
<pre>
~/developer1 (master)$ vim f1.py
~~~
def Func1(username):
    print("Hello ", username)

Func1("hyewon")
~~~

~/developer1 (master)$ git commit -am "commmit from developer1 with hyewon"
[master a0e1dce] commmit from developer1 with hyewon
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>

commit된 파일을 원격저장소에 push 한다. GitLab에서 파일을 확인하면 "hyewon"으로 들어가있음을 확인한다.
<pre>
~/developer1 (master)$ git push origin master
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 289 bytes | 289.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
To https://gitlab.com/young-jin-lee/git-test.git
   b3e5d06..a0e1dce  master -&gt; master
</pre>

### 4. developer2 의 저장소

developer2의 저장소에서는 Func1의 파라미터를 "youngjin"에서 "seokhwan"으로 수정하고 commit 한다.
<pre>
~/developer2 (master)$ vim f1.py
~~~
def Func1(username):
    print("Hello ", username)

Func1("seokhwan")
~~~

 ~/developer2 (master)$ git commit -am "commit from developer2 with seokhwan"
[master 387eeb7] commit from developer2 with seokhwan
 1 file changed, 1 insertion(+), 1 deletion(-)
</pre>

수정한 파일을 원격저장소에 push하면 실패 메세지가 뜬다. hint를 보면 원격저장소에 현재 저장소가 가지고 있지 않은 내용이 있기 때문에 먼저 pull을 해야한다고 적혀있다.
<pre>
 ~/developer2 (master)$ git push origin master
To https://gitlab.com/young-jin-lee/git-test.git
 ! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://gitlab.com/young-jin-lee/git-test.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Integrate the remote changes (e.g.
hint: 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</pre>

pull을 시도해도 실패 메세지가 뜬다. 양쪽에서 같은 부분을 수정했기 때문에 병합 충돌이 일어난 것이다. 
<pre>
 ~/developer2 (master)$ git pull origin master
remote: Enumerating objects: 5, done.
remote: Counting objects: 100% (5/5), done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 1), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (3/3), 269 bytes | 16.00 KiB/s, done.
From https://gitlab.com/young-jin-lee/git-test
 * branch            master     -&gt; FETCH_HEAD
   b3e5d06..a0e1dce  master     -&gt; origin/master
Auto-merging f1.py
CONFLICT (content): Merge conflict in f1.py
Automatic merge failed; fix conflicts and then commit the result.
</pre>

여기서 부터는 케이스1과 동일한 해결 과정이다. 충돌이 일어난 부분에서 한쪽의 코드를 날리고 commit 후 push를 하면 된다.

<pre>
 ~/developer2 (master|MERGING)$ git status
On branch master
Your branch and 'origin/master' have diverged,
and have 1 and 1 different commits each, respectively.
  (use "git pull" to merge the remote branch into yours)

You have unmerged paths.
  (fix conflicts and run "git commit")
  (use "git merge --abort" to abort the merge)

Unmerged paths:
  (use "git add <file>..." to mark resolution)
        both modified:   f1.py

no changes added to commit (use "git add" and/or "git commit -a")
&lt;/pre&gt;

<pre>
 ~/developer2 (master)$ cat f1.py
def Func1(username):
    print("Hello ", username)

&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD
Func1("seokhwan")
=======
Func1("hyewon")
&gt;&gt;&gt;&gt;&gt;&gt;&gt; a0e1dcee15d5cbe96715d5265ad92cbe70580b6a
</pre>

<pre>
 ~/developer2 (master)$ vim f1.py

~~~
def Func1(username):
    print("Hello ", username)

Func1("seokhwan")
~~~

 ~/developer2 (master)$ git commit -am "merge commit with seokhwan"
[master b5bbcbc] merge commit with seokhwan
</pre>



</file></pre></file></pre>
:ET