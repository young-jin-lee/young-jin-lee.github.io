I"_<h4><u><b> Javascript Operators </b></u></h4>

<ol>
  <li>String concatnation</li>
</ol>
<pre>
    console.log('my' + ' cat');
    console.log('1' + 2);
    console.log(`string literals: 1+2 = ${1 + 2}`);
</pre>

<ol>
  <li>Numeric operators</li>
</ol>
<pre>
    console.log(1 + 1 - 1 / 1 * 1 % 2 ** 2);
</pre>

<ol>
  <li>Increment(decrement) operators</li>
</ol>
<pre>
    let counter = 1;
    const preIncrement = ++counter;
    console.log(`preIncrement: ${preIncrement}, counter: ${counter}`);
    const postIncrement = counter ++;
    console.log(`preIncrement: ${preIncrement}, counter: ${counter}`);
</pre>

<ol>
  <li>Assignment operators</li>
</ol>
<pre>
    let x = 1;
    let y = 2;
    x += y;
</pre>

<ol>
  <li>Comparison operators</li>
</ol>
<pre>
    console.log(1 &lt; 3);
    console.log(1 &gt; 3);
    console.log(1 &lt;= 3);
    console.log(1 &gt;= 3);
</pre>

<ol>
  <li>
    <table>
      <tbody>
        <tr>
          <td>Logical operators :</td>
          <td>¬†</td>
          <td>, &amp;&amp;, !</td>
        </tr>
        <tr>
          <td>- expression Ï§ë Ïó∞ÏÇ∞Ïù¥ ÎßéÏùÄ Í≤ÉÏùÑ Îí§Ïóê Î∞∞ÏπòÌïúÎã§!!</td>
          <td>¬†</td>
          <td>ÏôÄ &amp;&amp;Ïù¥ ÌòºÌï©ÎêòÏñ¥ ÏûàÎã§Î©¥ &amp;&amp;ÏùÑ Í∞ÄÏû• Îí§Ïóê!</td>
        </tr>
      </tbody>
    </table>
  </li>
</ol>
<pre>
    const value1 = false;
    const value2 = 4 &lt; 2;
    console.log(`or: ${value1 || value2 || check()}`);

    function check(){
        for (let i = 0; i &lt; 10; i++){
            console.log('wasting time');
        }
        return true;
    }
</pre>

<ol>
  <li>Equality</li>
</ol>
<pre>
    const stringFive = '5';
    const numberFive = 5;

    console.log(stringFive == numberFive);
    console.log(stringFive === numberFive);

    // object equality by reference
    const a = {name: "a"};
    const b = {name: "b"};
    const c = a;
    console.log(a == b); // false
    console.log(a === b); // false
    console.log(a == c); // true 
    console.log(a === c); // true

    // equality - puzzler
    console.log(0 == false); // t
    console.log(0 === false); // f
    console.log('' == false); // t
    console.log('' === false); // f
    console.log(null == undefined); // t
    console.log(null === undefined); // f
</pre>

<ol>
  <li>Conditional operators: if</li>
</ol>
<pre>
    const name = 'a';
    if (name === 'a'){
        console.log("Welcome a");
    }else if(name === 'coder'){
        console.log('Welcome b');
    }else{
        console.log('unknown');
    }
</pre>

<ol>
  <li>Tenary operator: ?
    <ul>
      <li>condition ? value1 : value2;</li>
      <li>Í∞ÑÎã®Ìï† ÎïåÎßå ÏÇ¨Ïö©. Î≥µÏû°Ìï†Îïê ifÎÇò switch</li>
    </ul>
  </li>
</ol>
<pre>
    console.log(name === 'a' ? 'yes' : 'no'); 
</pre>

<ol>
  <li>Switch statement
    <ul>
      <li>use for multiple if checks(if Î¨∏ÏóêÏÑú else if Í∞Ä ÎßéÏùÑ Îïå ÏÇ¨Ïö©.)</li>
      <li>use for enum-like value check</li>
      <li>use for multiple type checks in TS</li>
    </ul>
  </li>
</ol>
<pre>
    const browser = 'IE';
    switch (browser){
        case 'IE':
            console.log('go away!');
            break;
        case 'Chrome':
        case 'Firefox':
            console.log('good');
            break;
        default:
            console.log('same all!');
            break;
    }
</pre>

<ol>
  <li>Loops</li>
</ol>

<pre>
    // while loop, while the condition is truthy, body code is executed
    let i = 3;
    while (i &gt; 0){
        console.log(`while: ${i}`);
        i--;
    }

    // do while loop, body code is executed first, then check the condition.
    do {
        console.log(`do while: ${i}`);
        i--;
    } while (i &gt; 0);
</pre>

<ol>
  <li>For loops; consider the time complexity. Try to avoid nested loops which results in O(n^2)</li>
</ol>
<pre>
    for(let i = 0; i &lt; 10; i++){
        for (let j = 0; j &lt; 10; j++){
            console.log(`i: ${i}, j:${j}`);
        }
    }
</pre>
:ET