I"O<ul>
  <li>mysql 설치</li>
</ul>

<p>설치 과정 중 ‘Accounts and Roles’에서 MySQL Root Password를 설정했을 것이다.
향후 장고와 연동하는 세팅 작업에서 USER: root, PASSWORD: ‘설치 과정에서 입력한 패스워드’로 활용할 수 있다.</p>

<ul>
  <li>DB 생성</li>
</ul>

<p>foo_db라는 데이터베이스를 생성하고 한글을 사용할 수 있는 UTF8로 문자열 저장</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE DATABASE foo_db default CHARACTER SET UTF8;
</code></pre></div></div>

<p>생성된 데이터베이스 확인</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SHOW DATABASES;
</code></pre></div></div>

<ul>
  <li>계정 생성 및 권한 부여</li>
</ul>

<p>root를 사용해도 되지만, 생성한 데이터베이스에 대한 슈퍼유저를 따로 생성할 수 있다.
foo_user라는 유저를 생성(따옴표X), ‘foo_pw’로 비밀번호 설정 후, foo_db의 모든 권한을 부여한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE USER foo_user IDENTIFIED 'foo_pw'
GRANT ALL ON foo_db.* to 'foo_user'@'%';
FLUSH PRIVILEGES;
</code></pre></div></div>

<ul>
  <li>settings.py 수정</li>
</ul>

<p>먼저 pymysql과 cryptygraphy라는 패키지를 설치해야한다.
그리고 아래 세줄을 settings.py 상단에 입력한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import pymysql
import cryptography
pymysql.install_as_MySQLdb()
</code></pre></div></div>

<p>settings.py 아래에 위치한 데이터베이스 관련 코드를 다음과 같이 수정한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'foo_db',
        'USER': 'foo_user',
        'PASSWORD': 'foo_pw',
        'HOST': 'localhost',
        'PORT': '3306',
        'OPTIONS': {
            'init_command': 'SET sql_mode="STRICT_TRANS_TABLES"'
        }
    }
}
</code></pre></div></div>

<ul>
  <li>model.py 만들기</li>
</ul>

<p>간단하게 first name, last name, email 필드를 가지는 모델을 정의한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from django.db import models

# Create your models here.

class User(models.Model):
    fname = models.CharField(max_length= 255, unique = False)
    lname = models.CharField(max_length= 255, unique = False)
    email = models.EmailField(max_length=255, unique = True)
</code></pre></div></div>

<ul>
  <li>마이그레이션</li>
</ul>

<p>mysql의 foo_db라는 데이터베이스와 장고프로젝트를 연동한다. 
foo_db 안에 models.py가 들어있는 app의 이름과 models.py에서 스키마를 정의한 클래스명으로 테이블이 생성되었다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py makemigrations
python manage.py migrate
</code></pre></div></div>

<ul>
  <li>확인</li>
</ul>

<p>이제 mysql 터미널이나 워크벤치에서 데이터를 추가한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>insert into values ("myfirstname", "mylastname", "foo@gmail.com");
</code></pre></div></div>

<p>localhost:8000/admin 페이지에 들어가서 데이터가 추가되었는지 확인한다. (반대로 여기서 추가한 데이터(레코드)도 당연히 mysql에서 확인할 수 있다.)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python manage.py runserver
</code></pre></div></div>

:ET